---
title: "Fertility rates in South America"
format: html
editor: visual
---

# Data

```{r}
latam_iso3 <- c("ARG", "BOL", "BRA", "CHL", "COL", "ECU", "PER", "URY", "VEN")
```

```{r}
library(readxl)

fertility_rates_file <- "Data/WPP2024_FERT_F01_FERTILITY_RATES_BY_SINGLE_AGE_OF_MOTHER.xlsx"

temp <- read_excel(fertility_rates_file,
                   skip = 16,
                   n_max = 1)
total_cols <- ncol(temp)

fertility_rates <- read_excel(fertility_rates_file,
                              skip=16,
                              col_types = c("numeric", "text", "text", "text",
                                            "text",  # Location code
                                            "text", "text",  # ISO3 and ISO2
                                            "numeric", "text", "numeric",
                                            "numeric",  # Year
                                            rep("numeric", total_cols - 11)))
```

```{r}
library(dplyr)

process_bd <- function(bd, start_year, end_year) {
  bd <- bd %>%
    filter(`ISO3 Alpha-code` %in% latam_iso3) %>%
    rename(Country = `Region, subregion, country or area *`)

  age_group_regex <- "^\\d+$"
  bd <- bd %>%
    select(
      all_of(c("Country", "ISO3 Alpha-code", "Year")),
      matches(age_group_regex)
    )

  start_year = 2010
  end_year = 2023

  bd <- bd %>%
    filter(start_year <= Year & Year <= end_year)
}
```

```{r}
fertility_rates <- process_bd(fertility_rates)
```

```{r}
library(tidyverse)

fertility_long <- fertility_rates %>%
  pivot_longer(
    cols = `15`:`49`,        # columns to pivot (note the backticks since they're numeric colnames)
    names_to = "MothersAge",        # new column for age
    values_to = "FertilityRate"  # new column for fertility rate values
  )
```

```{r}
library(readxl)

total_births_file <- "Data/WPP2024_FERT_F03_BIRTHS_BY_SINGLE_AGE_OF_MOTHER.xlsx"

temp <- read_excel(total_births_file,
                   skip = 16,
                   n_max = 1)
total_cols <- ncol(temp)

total_births <- read_excel(total_births_file,
                          skip=16,
                          col_types = c("numeric", "text", "text", "text",
                                        "text",  # Location code
                                        "text", "text",  # ISO3 and ISO2
                                        "numeric", "text", "numeric",
                                        "numeric",  # Year
                                        rep("numeric", total_cols - 11)))
```

```{r}
total_births <- process_bd(total_births)

births_long <- total_births %>%
  pivot_longer(
    cols = `15`:`49`,
    names_to = "MothersAge",
    values_to = "Births"
  )
```

```{r}
births_data <- inner_join(
  births_long,
  fertility_long,
  by = c("Country", "ISO3 Alpha-code", "Year", "MothersAge")
)

births_data <- births_data %>%
  mutate(TotalWomen = (Births * 1000 * 1000) / FertilityRate)
```

```{r}
library(tidyverse)

births_data_grouped <- births_data %>%
  mutate(AgeGroup = if_else(as.numeric(MothersAge) <= 18, "≤18", ">18")) %>%
  group_by(Country, `ISO3 Alpha-code`, Year, AgeGroup) %>%
  summarise(
    Births = sum(Births, na.rm = TRUE),
    TotalWomen  = sum(TotalWomen, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  pivot_wider(
    names_from = AgeGroup,
    values_from = c(Births, TotalWomen)
  )

births_data_grouped <- births_data_grouped %>%
  mutate(
    `BirthRate_≤18`  = (`Births_≤18` / `TotalWomen_≤18`) * 1000 * 1000,
    `BirthRate_>18`  = (`Births_>18` / `TotalWomen_>18`) * 1000 * 1000
  )
```

```{r}
library(ggplot2)
library(tidyverse)
library(glue)

graph_age <- function(age) {
  ggplot(births_data_grouped, aes(x = Year, y = .data[[age]], color = Country, group = Country)) +
    geom_line(size = 0.8) +  # Adjust the line thickness
    geom_point() +
    labs(
      title = glue("Fertility rates in {age}"),
      subtitle = "(births per 1,000 women)",
      x = "Year",
      y = "Birth rates"
    ) +
    theme_minimal() +
    theme(
      legend.position = "right",
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    )
}

graph_age("BirthRate_≤18")
graph_age("BirthRate_>18")
```

```{r}
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(tidyr)

south_america <- ne_countries(scale = "medium", continent = "South America", returnclass = "sf")

draw_heat_map_year <- function(years, age) {
  data <- fertility_rates %>%
    select(Country, Year, `ISO3 Alpha-code`, .data[[age]]) %>%
    filter(Year %in% years)

  map_data <- south_america %>%
    left_join(data, by = c("iso_a3" = "ISO3 Alpha-code")) %>%
    drop_na(Year)

  # Create the map visualization with four panels
  ggplot(data = map_data) +
    geom_sf(aes(fill = .data[[age]], geometry = geometry), color = "black") +
    scale_fill_gradient(
      low = "#FEE0D2",   # Lighter color
      high = "#A50F15",   # Dark red for higher values
      na.value = "gray90", # Gray for countries with no data
      limits = c(0, 150),   # Value range
      breaks = seq(0, 150, by = 10), # Scale in intervals of 5
      name = "(births per 1,000 women)"
    ) +
    labs(
      title = glue("Age-specific fertility rates by {age} age"),
      subtitle = "",
    ) +
    facet_wrap(~Year, ncol = length(years)) +  # Arrange panels in a single row
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      axis.text = element_text(size = 8),
      strip.text = element_text(face = "bold", size = 10), # Facet titles
      legend.position = "right",
      panel.grid = element_blank() # Remove grid lines
    )
}

draw_heat_map_year(c(2010, 2015, 2020, 2021, 2022, 2023), "15")
draw_heat_map_year(c(2010, 2015, 2020, 2021, 2022, 2023), "17")
draw_heat_map_year(c(2010, 2015, 2020, 2021, 2022, 2023), "20")
```

```{r}
library(readr)

cima_learning <- read_csv("Data/cima_learning.csv")

cima_learning <- cima_learning %>%
  filter(Country %in% latam_iso3, CIMA_Indicator == "Puntaje_Prom",
         Class == "Total", Source == "PISA")
```

```{r}
graph_score <- function(subject) {
  cima_learning <- cima_learning %>%
    filter(Subject == subject)
  ggplot(cima_learning, aes(x = Year, y = Value, color = Country, group = Country)) +
    geom_line(size = 0.8) +  # Adjust the line thickness
    geom_point() +
    labs(
      title = glue("PISA scores in subject {subject}"),
      x = "Year",
      y = "Score"
    ) +
    theme_minimal() +
    theme(
      legend.position = "right",
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    )
}

graph_score("Ciencias")
graph_score("Matematicas")
graph_score("Lectura")
```

```{r}
south_america <- ne_countries(scale = "medium", continent = "South America", returnclass = "sf")

draw_heat_map_subject <- function(subject) {
  data <- cima_learning %>%
    filter(Subject %in% subject)

  map_data <- south_america %>%
    left_join(data, by = c("iso_a3" = "Country")) %>%
    drop_na(Year)

  # Create the map visualization with four panels
  ggplot(data = map_data) +
    geom_sf(aes(fill = Value, geometry = geometry), color = "black") +
    scale_fill_gradient(
      low = "#FEE0D2",   # Lighter color
      high = "#A50F15",   # Dark red for higher values
      na.value = "gray90", # Gray for countries with no data
      limits = c(300, 500),   # Value range
      breaks = seq(300, 500, by = 20), # Scale in intervals of 5
      name = "PISA total score"
    ) +
    labs(
      title = glue("PISA scores in subject {subject}"),
      subtitle = "",
    ) +
    facet_wrap(~Year, ncol = length(unique(map_data$Year))) +  # Arrange panels in a single row
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      axis.text = element_text(size = 8),
      strip.text = element_text(face = "bold", size = 10), # Facet titles
      legend.position = "right",
      panel.grid = element_blank() # Remove grid lines
    )
}

draw_heat_map_subject("Ciencias")
draw_heat_map_subject("Matematicas")
draw_heat_map_subject("Lectura")
```

```{r}
view(fertility_rates)
view(fertility_long)

# Paso 1: Sumar la tasa de fertilidad total por país y año
fertilidad_total <- fertility_long %>%
  group_by(Country, Year) %>%
  summarise(TotalFertility = sum(FertilityRate), .groups = "drop")

# Paso 2: Pivotear — ahora los años serán columnas
tabla_resumen <- fertilidad_total %>%
  pivot_wider(names_from = Year, values_from = TotalFertility)

# Paso 3: Ver tabla
View(tabla_resumen)

# (Opcional) Guardar como CSV
write.csv(tabla_resumen, "tabla_resumen_fertilidad_transpuesta.csv", row.names = FALSE)

```

```{r}
# Graficar
ggplot(fertilidad_total, aes(x = Year, y = TotalFertility, color = Country)) +
  geom_line(size = 1) +
  geom_point(size = 1.5) +
  labs(
    title = "Tasa Total de Fertilidad por País (2010–2023)",
    x = "Año",
    y = "Tasa Total de Fertilidad",
    color = "País"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

```{r}
elbow = function(data) {
  library(factoextra)
  # determine the maximum number of clusters
  n_obs <- nrow(data)  # number of rows in the scaled data
  
  # plot the elbow method with a limit on the number of clusters
  fviz_nbclust(data, kmeans, method = "wss", k.max = min(10, n_obs - 1)) +
    labs(title = "elbow method to determine the optimal number of clusters for ...")
}
```

```{r}
clusterize <- function(data, k) {
  library(factoextra)
  library(dendextend)

  # Calculate the distance matrix (using Euclidean distance)
  distance_matrix <- dist(data, method = "euclidean")

  # Perform hierarchical clustering (using complete linkage method)
  hclust_result <- hclust(distance_matrix, method = "complete")

  # Plot the dendrogram
  dend <- fviz_dend(hclust_result, k = k,  # Number of desired clusters
            cex = 0.5,             # Text size
            k_colors = c("red", "blue", "green"),  # Cluster colors
            rect = TRUE,           # Draw rectangles around clusters
            rect_border = "gray",
            rect_fill = TRUE,
            main = "Dendrogram of Hierarchical Clustering ...")

  # Assign observations to clusters (k = desired number of clusters)
  cluster_assignments <- cutree(hclust_result, k = k)  # Adjust "k" for the desired number of clusters

  # Visualize clusters in PCA space
  clusters <- fviz_cluster(
    list(data = data, cluster = cluster_assignments),
    geom = "point",
    ellipse.type = "convex",  # Draw convex hulls around clusters
    ggtheme = theme_minimal(),
    main = "Hierarchical Clustering Visualization with PCA"
  )

  return(list(
    dendrogram = dend,
    cluster_plot = clusters,
    assignments = cluster_assignments
  ))
}
```

```{r}
start_year <- 2010
end_year <- 2014

year_cols <- as.character(start_year:end_year)
data_range_1 <- tabla_resumen[, year_cols]
data_scaled_1 <- scale(data_range_1)
```

```{r}
elbow(data_scaled_1)
```

```{r}
clusterize(data_scaled_1, 3)
```

```{r}
start_year <- 2015
end_year <- 2019

year_cols <- as.character(start_year:end_year)
data_range_2 <- tabla_resumen[, year_cols]
data_scaled_2 <- scale(data_range_2)
```

```{r}
elbow(data_scaled_2)
clusterize(data_scaled_2, 3)
```

```{r}
start_year <- 2020
end_year <- 2023

year_cols <- as.character(start_year:end_year)
data_range_3 <- tabla_resumen[, year_cols]
data_scaled_3 <- scale(data_range_3)
```

```{r}
elbow(data_scaled_3)
clusterize(data_scaled_3, 3)
```

```{r}
# Cargar librerías necesarias
library(dplyr)

# Leer el archivo original (asegúrate de tener el archivo en el directorio de trabajo)
data_original <- read.csv("tabla_resumen_fertilidad_transpuesta.csv", check.names = FALSE)

# Renombrar la primera columna como "Country"
colnames(data_original)[1] <- "Country"

# Seleccionar columnas de 2010 a 2014
data_years <- data_original[, c("Country", "2010", "2011", "2012", "2013", "2014")]

# Escalar solo las columnas numéricas (excluyendo "Country")
data_scaled_1 <- scale(data_years[, -1])  # Excluye la columna "Country"

# Clustering jerárquico
hclust_result <- hclust(dist(data_scaled_1))
clusters_hierarchical <- cutree(hclust_result, k = 3)

# Combinar Country, datos originales y clusters
data_combined_2010_2014 <- data_years %>%
  mutate(Cluster = as.factor(clusters_hierarchical))

# Intercambiar etiquetas de cluster 1 y 2
data_combined_2010_2014 <- data_combined_2010_2014 %>%
  mutate(
    Cluster = case_when(
      Cluster == "1" ~ "2",
      Cluster == "2" ~ "1",
      TRUE ~ as.character(Cluster)
    ),
    Cluster = as.factor(Cluster)
  )

# Mostrar los primeros resultados
head(data_combined_2010_2014)

```

```{r}
# Cargar librerías necesarias
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("tidyr", quietly = TRUE)) install.packages("tidyr")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")

library(ggplot2)
library(dplyr)
library(tidyr)

# Convertir los datos a formato largo
data_long <- data_combined_2010_2014 %>%
  pivot_longer(
    cols = starts_with("20"),    # columnas de años
    names_to = "Year",           # nueva columna con el año
    values_to = "Emissions"      # nueva columna con el valor
  ) %>%
  mutate(Year = as.numeric(Year))  # convertir "2010", "2011", ... a número

# Crear el gráfico con facetas por Cluster
ggplot(data_long, aes(x = Year, y = Emissions, color = Country, group = Country)) +
  geom_line(size = 0.8) +
  geom_point(size = 2) +
  facet_wrap(~Cluster, nrow = 1) +
  scale_x_continuous(
    breaks = 2010:2014
  ) +
  theme_minimal() +
  labs(
    title = "Tasa de Fertilidad por País y Cluster (2010–2014)",
    subtitle = "Agrupado según clustering jerárquico",
    x = "Año",
    y = "Tasa estandarizada",
    color = "País"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    legend.position = "right"
  )

```
